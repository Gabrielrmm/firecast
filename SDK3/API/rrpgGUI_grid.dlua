local Objs = require("rrpgObjs.lua");

local SCREEN_SIZES_ARRAY = {"xs", "sm", "md", "lg", "xl"};
local VALID_SCREEN_SIZE_STR_DICT = {};

for i = 1, #SCREEN_SIZES_ARRAY, 1 do
	VALID_SCREEN_SIZE_STR_DICT[SCREEN_SIZES_ARRAY[i]] = true;
end;

-- Class Declaration

local Grid = Objs.newClass();

function Grid.shouldUseScreenSizeStr(value)
	return (value ~= nil) and (type(value) == "string") and VALID_SCREEN_SIZE_STR_DICT[value];
end;

function __registerScreenSizePropFor_specificScreenSize(screenSize, details, outerGetter, outerSetter)
	local wrappedSetter = 
		function(instance, value)
			return outerSetter(instance, screenSize, value);
		end;
		
	local wrappedGetter = 
		function (instance)
			return outerGetter(instance, screenSize);
		end;

	local propDetais = {getter=wrappedGetter, setter=wrappedSetter, tipo=details.tipo, values=details.values};
	
	if screenSize ~= nil then
		if details.lfmName ~= nil then
			Grid.props[details.lfmName .. "-" .. screenSize] = propDetais;
		else
			Grid.props[details.luaName .. "-" .. screenSize] = propDetais;
		end;
	
		Grid.props[details.luaName .. "_" .. screenSize] = propDetais;
	else
		Grid.props[details.luaName] = propDetais;
		
		if details.lfmName ~= nil then
			Grid.props[details.lfmName] = propDetais;
		end;
	end;
end;

local function __registerScreenSizeProp(details)
	local hostSetterMethodName = "Set" .. details.hostName;
	local hostGetterMethodName = "Get" .. details.hostName;
	local luaFirstLetterUpperCasePropName = details.luaName:gsub("^%l", string.upper);

	local setter = 
		function (instance, screenSizeOrValue, value)
			if Grid.shouldUseScreenSizeStr(screenSizeOrValue) then		
				_obj_invokeEx(instance.handle, hostSetterMethodName, screenSizeOrValue, value);	
			elseif (screenSizeOrValue ~= nil) then
				if value == nil then
					_obj_invokeEx(instance.handle, hostSetterMethodName, nil, screenSizeOrValue);						
				else						
					error('Invalid ScreenSize: "' .. tostring(screenSizeOrValue) .. '"');
				end;			
			else
				_obj_invokeEx(instance.handle, hostSetterMethodName, nil, value);	
			end;
			
			return instance;
		end;
		
	local getter = 
		function (instance, screenSize)
			if Grid.shouldUseScreenSizeStr(screenSize) then		
				return _obj_invokeEx(instance.handle, hostGetterMethodName, screenSize);	
			else
				return _obj_invokeEx(instance.handle, hostGetterMethodName, nil);	
			end;
		end;		
		
	Grid["set" .. luaFirstLetterUpperCasePropName] = setter;
	Grid["get" .. luaFirstLetterUpperCasePropName] = getter;

	__registerScreenSizePropFor_specificScreenSize(nil, details, getter, setter)

	for i = 1, #SCREEN_SIZES_ARRAY do
		__registerScreenSizePropFor_specificScreenSize(SCREEN_SIZES_ARRAY[i], details, getter, setter);
	end;
end;

local function __registerNonScreenSizeProp(details)
	local hostPropertyNamme = details.hostName;	
	local luaFirstLetterUpperCasePropName = details.luaName:gsub("^%l", string.upper);
	local useDefaultValue = details.useDefaultValueOnSet;
	local defaultValue = details.defaultValueOnSet;

	local setter = 
		function (instance, value)
			if (value == nil) and useDefaultValue then		
				_obj_setProp(instance.handle, hostPropertyNamme, defaultValue);
			else
				_obj_setProp(instance.handle, hostPropertyNamme, value);
			end;
					
			return instance;
		end;
		
	local getter = 
		function (instance)
			return _obj_getProp(instance.handle, hostPropertyNamme);
		end;		
		
	Grid["set" .. luaFirstLetterUpperCasePropName] = setter;
	Grid["get" .. luaFirstLetterUpperCasePropName] = getter;
	
	local propDetais = {getter=getter, setter=setter, tipo=details.tipo, values=details.values};
	Grid.props[details.luaName] = propDetais;
	
	if details.lfmName ~= nil then
		Grid.props[details.lfmName] = propDetais;
	end;
end;

function Grid:invalidate()
	_obj_invokeEx(self.handle, "Invalidate");
	return self;
end;

function Grid:reset()
	_obj_invokeEx(self.handle, "Reset");
	return self;
end;

local GRID_VERT_ALIGN_VALUES = {"top", "center", "middle", "bottom"};
local GRID_HORZ_ALIGN_VALUES = {"start", "center", "end", "around", "between", "left", "right", "middle"};

__registerNonScreenSizeProp({luaName="role", hostName="Role", tipo="enum", values={"none", "row", "col", "inlineBlock", "container"}});
__registerNonScreenSizeProp({luaName="root", hostName="Root", tipo="bool", useDefaultValueOnSet=true, defaultValueOnSet=true});
__registerNonScreenSizeProp({luaName="screenSizeDet", lfmName="screen-size-det", hostName="ScreenSizeDeterminator", tipo="bool", useDefaultValueOnSet=true, defaultValueOnSet=true});
__registerNonScreenSizeProp({luaName="autoHeight", lfmName="auto-height", hostName="AutoHeight", tipo="bool", useDefaultValueOnSet=true, defaultValueOnSet=true});

__registerScreenSizeProp({luaName="width", hostName="Width", tipo="int"});
__registerScreenSizeProp({luaName="cntVertAlign", lfmName="cnt-vert-align", hostName="CntVertAlign", tipo="enum", values=GRID_VERT_ALIGN_VALUES});
__registerScreenSizeProp({luaName="cntHorzAlign", lfmName="cnt-horz-align", hostName="CntHorzAlign", tipo="enum", values=GRID_HORZ_ALIGN_VALUES});
__registerScreenSizeProp({luaName="cntGutter", lfmName="cnt-gutter", hostName="CntGutter", tipo="double"});
__registerScreenSizeProp({luaName="cntLineSpacing", lfmName="cnt-line-spacing", hostName="CntLineSpacing", tipo="double"});
__registerScreenSizeProp({luaName="cntMinGridWidth", lfmName="cnt-min-grid-width", hostName="CntMinGridWidth", tipo="double"});
__registerScreenSizeProp({luaName="cntMinGridWidthFt", lfmName="cnt-min-grid-width-ft", hostName="CntMinGridWidthFt", tipo="double"});
__registerScreenSizeProp({luaName="invisibleReserved", lfmName="invisible-reserved", hostName="InvisibleReserved", tipo="bool"});
__registerScreenSizeProp({luaName="selfVertAlign", lfmName="self-vert-align", hostName="SelfVertAlign", tipo="enum", values=GRID_VERT_ALIGN_VALUES});
__registerScreenSizeProp({luaName="selfGutter", lfmName="self-gutter", hostName="SelfGutter", tipo="double"});

-- Instance

function Grid.new(ctrl)
	assert(ctrl ~= nil);
	
	local g = Grid.fromHandle(_obj_newObject("TLuaGridControl", ctrl.handle));		
	return g;
end;

return Grid;